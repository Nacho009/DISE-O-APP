{"ast":null,"code":"import { Observable, Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class WebSocketService {\n  constructor() {\n    this.url = \"ws://localhost:80/wsGames\";\n    this.socket$ = new Subject();\n  }\n  connect(url) {\n    this.socket = new WebSocket(url);\n    const observable = new Observable(observer => {\n      this.socket.onmessage = event => observer.next(event);\n      this.socket.onerror = event => observer.error(event);\n      this.socket.onclose = event => observer.complete();\n      return () => {\n        this.socket.close();\n      };\n    });\n    const openObservable = new Observable(observer => {\n      this.socket.onopen = event => {\n        observer.next(event);\n        observer.complete();\n      };\n    });\n    openObservable.subscribe(() => {\n      console.log('WebSocket connection established');\n    });\n    observable.subscribe(messageEvent => {\n      this.socket$.next(messageEvent);\n    });\n    return openObservable;\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.close();\n    }\n  }\n  sendMovement(idMatch, move) {\n    this.connect(this.url).subscribe(() => {\n      const message = {\n        type: 'MOVEMENT',\n        idMatch: idMatch,\n        move: move\n      };\n      this.socket.send(JSON.stringify(message));\n    });\n  }\n  sendChat(target, message) {\n    this.connect(this.url).subscribe(() => {\n      const chatMessage = {\n        type: 'CHAT',\n        target: target,\n        message: message\n      };\n      this.socket.send(JSON.stringify(chatMessage));\n    });\n  }\n  sendBroadcast(message) {\n    return new Promise(resolve => {\n      this.connect(this.url).subscribe(() => {\n        const broadcastMessage = {\n          type: 'BROADCAST',\n          message: message\n        };\n        this.socket.send(JSON.stringify(broadcastMessage));\n        resolve();\n      });\n    });\n  }\n}\nWebSocketService.ɵfac = function WebSocketService_Factory(t) {\n  return new (t || WebSocketService)();\n};\nWebSocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WebSocketService,\n  factory: WebSocketService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["Observable","Subject","WebSocketService","constructor","socket$","connect","url","socket","WebSocket","observable","observer","onmessage","event","next","onerror","error","onclose","complete","close","openObservable","onopen","subscribe","console","log","messageEvent","disconnect","sendMovement","idMatch","move","message","type","send","JSON","stringify","sendChat","target","chatMessage","sendBroadcast","Promise","resolve","broadcastMessage","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\nacho\\OneDrive\\Documentos\\GitHub\\DISENO-APP\\FrontEnd\\fegames\\src\\app\\websocket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { Move } from './Clases/Move';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WebSocketService {\n  private socket!: WebSocket;\n  public socket$: Subject<any>;\n  private url = \"ws://localhost:80/wsGames\";\n\n  constructor() {\n    this.socket$ = new Subject<any>();\n  }\n\n  public connect(url: string): Observable<Event> {\n    this.socket = new WebSocket(url);\n\n    const observable = new Observable<Event>((observer) => {\n      this.socket.onmessage = (event) => observer.next(event);\n      this.socket.onerror = (event) => observer.error(event);\n      this.socket.onclose = (event) => observer.complete();\n\n      return () => {\n        this.socket.close();\n      };\n    });\n\n    const openObservable = new Observable<Event>((observer) => {\n      this.socket.onopen = (event) => {\n        observer.next(event);\n        observer.complete();\n      };\n    });\n\n    openObservable.subscribe(() => {\n      console.log('WebSocket connection established');\n    });\n\n    observable.subscribe((messageEvent) => {\n      this.socket$.next(messageEvent);\n    });\n    \n\n    return openObservable;\n  }\n\n  public disconnect() {\n    if (this.socket) {\n      this.socket.close();\n    }\n  }\n\n  sendMovement(idMatch: String, move: Move) {\n    this.connect(this.url).subscribe(() => {\n      const message = {\n        type: 'MOVEMENT',\n        idMatch: idMatch,\n        move: move,\n      };\n      this.socket.send(JSON.stringify(message));\n    });\n  }\n\n  sendChat(target: string, message: string) {\n    this.connect(this.url).subscribe(() => {\n      const chatMessage = {\n        type: 'CHAT',\n        target: target,\n        message: message,\n      };\n      this.socket.send(JSON.stringify(chatMessage));\n    });\n  }\n\n  sendBroadcast(message: String): Promise<void> {\n    return new Promise((resolve) => {\n      this.connect(this.url).subscribe(() => {\n        const broadcastMessage = {\n          type: 'BROADCAST',\n          message: message,\n        };\n        this.socket.send(JSON.stringify(broadcastMessage));\n        resolve();\n      });\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
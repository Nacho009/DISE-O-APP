{"ast":null,"code":"import { Observable, Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class WebSocketService {\n  constructor() {\n    this.socket$ = new Subject();\n  }\n  connect(url) {\n    this.socket = new WebSocket(url);\n    const observable = new Observable(observer => {\n      this.socket.onmessage = event => observer.next(event);\n      this.socket.onerror = event => observer.error(event);\n      this.socket.onclose = event => observer.complete();\n      return () => {\n        this.socket.close();\n      };\n    });\n    const openObservable = new Observable(observer => {\n      this.socket.onopen = event => {\n        observer.next(event);\n        observer.complete();\n      };\n    });\n    openObservable.subscribe(() => {\n      console.log('WebSocket connection established');\n    });\n    observable.subscribe(messageEvent => {\n      this.socket$.next(JSON.parse(messageEvent.data));\n    });\n    return openObservable;\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.close();\n    }\n  }\n  sendMovement(idMatch, movement) {\n    this.connect(url).subscribe(() => {\n      const message = {\n        type: 'MOVEMENT',\n        idMatch: idMatch,\n        movement: movement\n      };\n      this.socket.send(JSON.stringify(message));\n    });\n  }\n  sendChat(target, message) {\n    this.connect(url).subscribe(() => {\n      const chatMessage = {\n        type: 'CHAT',\n        target: target,\n        message: message\n      };\n      this.socket.send(JSON.stringify(chatMessage));\n    });\n  }\n  sendBroadcast(message) {\n    this.connect(url).subscribe(() => {\n      const broadcastMessage = {\n        type: 'BROADCAST',\n        message: message\n      };\n      console.log(JSON.stringify(broadcastMessage));\n      this.socket.send(JSON.stringify(broadcastMessage));\n    });\n  }\n}\nWebSocketService.ɵfac = function WebSocketService_Factory(t) {\n  return new (t || WebSocketService)();\n};\nWebSocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WebSocketService,\n  factory: WebSocketService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["Observable","Subject","WebSocketService","constructor","socket$","connect","url","socket","WebSocket","observable","observer","onmessage","event","next","onerror","error","onclose","complete","close","openObservable","onopen","subscribe","console","log","messageEvent","JSON","parse","data","disconnect","sendMovement","idMatch","movement","message","type","send","stringify","sendChat","target","chatMessage","sendBroadcast","broadcastMessage","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\nacho\\OneDrive\\Documentos\\GitHub\\DISENO-APP\\FrontEnd\\fegames\\src\\app\\websocket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WebSocketService {\n  private socket!: WebSocket;\n  private socket$: Subject<any>;\n\n  constructor() {\n    this.socket$ = new Subject<any>();\n  }\n\n  public connect(url: string): Observable<Event> {\n    this.socket = new WebSocket(url);\n\n    const observable = new Observable<Event>((observer) => {\n      this.socket.onmessage = (event) => observer.next(event);\n      this.socket.onerror = (event) => observer.error(event);\n      this.socket.onclose = (event) => observer.complete();\n\n      return () => {\n        this.socket.close();\n      };\n    });\n\n    const openObservable = new Observable<Event>((observer) => {\n      this.socket.onopen = (event) => {\n        observer.next(event);\n        observer.complete();\n      };\n    });\n\n    openObservable.subscribe(() => {\n      console.log('WebSocket connection established');\n    });\n\n    observable.subscribe((messageEvent) => {\n      this.socket$.next(JSON.parse(messageEvent.data));\n    });\n\n    return openObservable;\n  }\n\n  public disconnect() {\n    if (this.socket) {\n      this.socket.close();\n    }\n  }\n\n  sendMovement(idMatch: number, movement: string) {\n    this.connect(url).subscribe(() => {\n      const message = {\n        type: 'MOVEMENT',\n        idMatch: idMatch,\n        movement: movement,\n      };\n      this.socket.send(JSON.stringify(message));\n    });\n  }\n\n  sendChat(target: string, message: string) {\n    this.connect(url).subscribe(() => {\n      const chatMessage = {\n        type: 'CHAT',\n        target: target,\n        message: message,\n      };\n      this.socket.send(JSON.stringify(chatMessage));\n    });\n  }\n\n  sendBroadcast(message: String) {\n    this.connect(url).subscribe(() => {\n      const broadcastMessage = {\n        type: 'BROADCAST',\n        message: message,\n      };\n      console.log(JSON.stringify(broadcastMessage));\n      this.socket.send(JSON.stringify(broadcastMessage));\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { Observable, Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class WebSocketService {\n  constructor() {}\n  connect(url) {\n    this.socket = new WebSocket(url);\n    this.socket$ = new Subject();\n    const observable = new Observable(observer => {\n      this.socket.onmessage = event => observer.next(event);\n      this.socket.onerror = event => observer.error(event);\n      this.socket.onclose = event => observer.complete();\n      return () => {\n        this.socket.close();\n      };\n    });\n    const socketSubject = new Subject();\n    const socketDataSubject = new Subject();\n    const observer = {\n      next: data => {\n        if (this.socket.readyState === WebSocket.OPEN) {\n          this.socket.send(JSON.stringify(data));\n        }\n      }\n    };\n    socketSubject.subscribe(observer);\n    observable.subscribe(messageEvent => {\n      socketDataSubject.next(JSON.parse(messageEvent.data));\n    });\n    return socketDataSubject;\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.close();\n    }\n  }\n  sendMovement(idMatch, movement) {\n    const message = {\n      type: 'MOVEMENT',\n      idMatch: idMatch,\n      movement: movement\n    };\n    this.socket$.next(message);\n  }\n  sendChat(target, message) {\n    const chatMessage = {\n      type: 'CHAT',\n      target: target,\n      message: message\n    };\n    this.socket$.next(chatMessage);\n  }\n  sendBroadcast(message) {\n    const broadcastMessage = {\n      type: \"BROADCAST\",\n      message: message\n    };\n    console.log(\"11111111\");\n    console.log(broadcastMessage);\n    console.log(JSON.stringify(broadcastMessage));\n    this.socket$.next(broadcastMessage);\n  }\n}\nWebSocketService.ɵfac = function WebSocketService_Factory(t) {\n  return new (t || WebSocketService)();\n};\nWebSocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WebSocketService,\n  factory: WebSocketService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,UAAU,EAAEC,OAAO,QAAQ,MAAM;;AAK1C,OAAM,MAAOC,gBAAgB;EAI3BC,eAAe;EAERC,OAAO,CAACC,GAAW;IACxB,IAAI,CAACC,MAAM,GAAG,IAAIC,SAAS,CAACF,GAAG,CAAC;IAChC,IAAI,CAACG,OAAO,GAAG,IAAIP,OAAO,EAAO;IAEjC,MAAMQ,UAAU,GAAG,IAAIT,UAAU,CAAgBU,QAAQ,IAAI;MAC3D,IAAI,CAACJ,MAAM,CAACK,SAAS,GAAIC,KAAK,IAAKF,QAAQ,CAACG,IAAI,CAACD,KAAK,CAAC;MACvD,IAAI,CAACN,MAAM,CAACQ,OAAO,GAAIF,KAAK,IAAKF,QAAQ,CAACK,KAAK,CAACH,KAAK,CAAC;MACtD,IAAI,CAACN,MAAM,CAACU,OAAO,GAAIJ,KAAK,IAAKF,QAAQ,CAACO,QAAQ,EAAE;MAEpD,OAAO,MAAK;QACV,IAAI,CAACX,MAAM,CAACY,KAAK,EAAE;MACrB,CAAC;IACH,CAAC,CAAC;IAEF,MAAMC,aAAa,GAAG,IAAIlB,OAAO,EAAgB;IACjD,MAAMmB,iBAAiB,GAAG,IAAInB,OAAO,EAAO;IAE5C,MAAMS,QAAQ,GAAG;MACfG,IAAI,EAAGQ,IAAY,IAAI;QACrB,IAAI,IAAI,CAACf,MAAM,CAACgB,UAAU,KAAKf,SAAS,CAACgB,IAAI,EAAE;UAC7C,IAAI,CAACjB,MAAM,CAACkB,IAAI,CAACC,IAAI,CAACC,SAAS,CAACL,IAAI,CAAC,CAAC;;MAE1C;KACD;IAEDF,aAAa,CAACQ,SAAS,CAACjB,QAAQ,CAAC;IACjCD,UAAU,CAACkB,SAAS,CAAEC,YAAY,IAAI;MACpCR,iBAAiB,CAACP,IAAI,CAACY,IAAI,CAACI,KAAK,CAACD,YAAY,CAACP,IAAI,CAAC,CAAC;IACvD,CAAC,CAAC;IAEF,OAAOD,iBAAiB;EAC1B;EAEOU,UAAU;IACf,IAAI,IAAI,CAACxB,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,CAACY,KAAK,EAAE;;EAEvB;EAEAa,YAAY,CAACC,OAAe,EAAEC,QAAgB;IAC5C,MAAMC,OAAO,GAAG;MACdC,IAAI,EAAE,UAAU;MAChBH,OAAO,EAAEA,OAAO;MAChBC,QAAQ,EAAEA;KACX;IACD,IAAI,CAACzB,OAAO,CAACK,IAAI,CAACqB,OAAO,CAAC;EAC5B;EAEAE,QAAQ,CAACC,MAAc,EAAEH,OAAe;IACtC,MAAMI,WAAW,GAAG;MAClBH,IAAI,EAAE,MAAM;MACZE,MAAM,EAAEA,MAAM;MACdH,OAAO,EAAEA;KACV;IACD,IAAI,CAAC1B,OAAO,CAACK,IAAI,CAACyB,WAAW,CAAC;EAChC;EAEAC,aAAa,CAACL,OAAe;IAC3B,MAAMM,gBAAgB,GAAG;MACvBL,IAAI,EAAE,WAAW;MACjBD,OAAO,EAAEA;KACV;IACDO,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;IACvBD,OAAO,CAACC,GAAG,CAACF,gBAAgB,CAAC;IAC7BC,OAAO,CAACC,GAAG,CAACjB,IAAI,CAACC,SAAS,CAACc,gBAAgB,CAAC,CAAC;IAG7C,IAAI,CAAChC,OAAO,CAACK,IAAI,CAAC2B,gBAAgB,CAAC;EACrC;;AA1EWtC,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAyC,SAAhBzC,gBAAgB;EAAA0C,YAFf;AAAM","names":["Observable","Subject","WebSocketService","constructor","connect","url","socket","WebSocket","socket$","observable","observer","onmessage","event","next","onerror","error","onclose","complete","close","socketSubject","socketDataSubject","data","readyState","OPEN","send","JSON","stringify","subscribe","messageEvent","parse","disconnect","sendMovement","idMatch","movement","message","type","sendChat","target","chatMessage","sendBroadcast","broadcastMessage","console","log","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\nacho\\OneDrive\\Documentos\\GitHub\\DISENO-APP\\FrontEnd\\fegames\\src\\app\\websocket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WebSocketService {\n  private socket!: WebSocket;\n  private socket$!: Subject<any>;\n\n  constructor() {}\n\n  public connect(url: string): Subject<any> {\n    this.socket = new WebSocket(url);\n    this.socket$ = new Subject<any>();\n\n    const observable = new Observable<MessageEvent>((observer) => {\n      this.socket.onmessage = (event) => observer.next(event);\n      this.socket.onerror = (event) => observer.error(event);\n      this.socket.onclose = (event) => observer.complete();\n\n      return () => {\n        this.socket.close();\n      };\n    });\n\n    const socketSubject = new Subject<MessageEvent>();\n    const socketDataSubject = new Subject<any>();\n\n    const observer = {\n      next: (data: Object) => {\n        if (this.socket.readyState === WebSocket.OPEN) {\n          this.socket.send(JSON.stringify(data));\n        }\n      },\n    };\n\n    socketSubject.subscribe(observer);\n    observable.subscribe((messageEvent) => {\n      socketDataSubject.next(JSON.parse(messageEvent.data));\n    });\n\n    return socketDataSubject;\n  }\n\n  public disconnect() {\n    if (this.socket) {\n      this.socket.close();\n    }\n  }\n\n  sendMovement(idMatch: number, movement: string) {\n    const message = {\n      type: 'MOVEMENT',\n      idMatch: idMatch,\n      movement: movement,\n    };\n    this.socket$.next(message);\n  }\n\n  sendChat(target: string, message: string) {\n    const chatMessage = {\n      type: 'CHAT',\n      target: target,\n      message: message,\n    };\n    this.socket$.next(chatMessage);\n  }\n\n  sendBroadcast(message: String) {\n    const broadcastMessage = {\n      type: \"BROADCAST\",\n      message: message,\n    };\n    console.log(\"11111111\")\n    console.log(broadcastMessage)\n    console.log(JSON.stringify(broadcastMessage))\n\n\n    this.socket$.next(broadcastMessage);\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}